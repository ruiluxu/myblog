<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SonarQube安装及使用]]></title>
    <url>%2F2019%2F05%2F25%2FSonarQube%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[SonarQube是什么SonarQube是一种自动代码审查工具，用于检测代码中的错误，漏洞和代码异味。 它可以与您现有的工作流程集成，以便在项目分支和拉取请求之间进行连续的代码检查。 特征： 建议将SonarQube扫描仪用作使用SonarQube分析项目的默认启动器。 SonarQube安装及配置下载及安装准备工作： SonarQube（最新版本7.4）：https://www.sonarqube.org/downloads/ 安装： 先查看版本对应的环境要求：https://docs.sonarqube.org/latest/requirements/requirements/ 下载好sonarqube后解压，目录结构为下图所示： 修改sonar配置文件在config/sonar.properties文件中，修改端口 12#修改端口，默认端口为9000#sonar.web.port=9000 配置数据存储目前支持： H2（默认内嵌数据库，只能用于测试场景） Microsoft SQL Server Oracle（本人采用） 12345678910111213141516Oracle JDBC驱动程序版本12.1.0.1和12.1.0.2存在重大缺陷，不建议与SonarQube一起使用（请参阅更多详细信息）。下载oracle的jdbc驱动包：https://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html将jar包放在sonarqube-7.4\extensions\jdbc-driver\oracle执行以下语句，新建sonarqube表空间和用户，并授予相应的权限CREATE TABLESPACE sonarqube DATAFILE &apos;d://app/sonarqube.dbf&apos; SIZE 512M AUTOEXTEND ON NEXT 512M MAXSIZE 20480M;CREATE USER sonarqube IDENTIFIED BY sonarqube;GRANT CONNECT, RESOURCE ,DBA TO sonarqube;然修改sonar.propertiessonar.jdbc.username=sonarqube sonar.jdbc.password=sonarqube sonar.jdbc.url=jdbc:oracle:thin:@192.168.5.13:1521/orcl PostgreSQL MySQL （不推荐） 12可以在MySQL中使用两种众所周知的引擎：MyISAM和InnoDB。 MyISAM是两个引擎中最古老的，并且正逐渐被InnoDB取代。 随着质量控制项目数量的增加，InnoDB显然更快，并且使用SonarQube可以更好地扩展。 如果您是SonarQube的早期采用者，您可能有一系列仍在使用MyISAM的表。 要提高性能，您应该将所有表的引擎更改为InnoDB。一旦所有SonarQube表都使用InnoDB引擎，首先要做的是使用innodb_buffer_pool_size参数为MySQL实例分配最大量的RAM，并为query_cache_size参数提供至少15Mb。 配置好数据库后启动报错： 123456789101112131415161718192021222018.12.18 18:35:03 INFO app[][o.s.a.p.ProcessLauncherImpl] Launch process[[key=&apos;web&apos;, ipcIndex=2, logFilenamePrefix=web]] from [D:\soft\sonarqube\sonarqube-7.4]: D:\Program Files (x86)\Java\jre1.8.0_144\bin\java -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djava.io.tmpdir=D:\soft\sonarqube\sonarqube-7.4\temp -Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -cp ./lib/common/*;D:\soft\sonarqube\sonarqube-7.4\extensions\jdbc-driver\oracle\ojdbc6.jar org.sonar.server.app.WebServer D:\soft\sonarqube\sonarqube-7.4\temp\sq-process2345787089702296293properties2018.12.18 18:35:10 INFO app[][o.s.a.SchedulerImpl] Process [web] is stopped2018.12.18 18:35:10 WARN app[][o.e.t.n.Netty4Transport] exception caught on transport layer [[id: 0x7400b5b1, L:/127.0.0.1:50250 - R:/127.0.0.1:9001]], closing connectionjava.io.IOException: 远程主机强迫关闭了一个现有的连接。 at sun.nio.ch.SocketDispatcher.read0(Native Method) at sun.nio.ch.SocketDispatcher.read(Unknown Source) at sun.nio.ch.IOUtil.readIntoNativeBuffer(Unknown Source) at sun.nio.ch.IOUtil.read(Unknown Source) at sun.nio.ch.SocketChannelImpl.read(Unknown Source) at io.netty.buffer.UnpooledUnsafeDirectByteBuf.setBytes(UnpooledUnsafeDirectByteBuf.java:433) at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1100) at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:372) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:123) at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) at java.lang.Thread.run(Unknown Source)2018.12.18 18:35:10 INFO app[][o.s.a.SchedulerImpl] Process [es] is stopped2018.12.18 18:35:10 INFO app[][o.s.a.SchedulerImpl] SonarQube is stopped&lt;-- Wrapper Stopped 原因是数据库配置信息不对或者jdbc驱动包版本不对。 Sonar启动在bin目下找到系统对应的版本，启动StartSonar.bat 12345StartSonar.bat 启动sonarqubeInstallNTService.bat 安装sonarqube服务StartNTService.bat 启动sonarqube服务StopNTService.bat 停止sonarqube服务UninstallNTService.bat 卸载sonarqube服务 启动报错： 1234567891011121314151617181920212223242526272019.02.14 15:35:40 INFO app[][o.s.a.SchedulerImpl] Process [es] is stopped2019.02.14 15:35:40 INFO app[][o.s.a.SchedulerImpl] SonarQube is stoppedFATAL StatusLogger Interrupted before Log4j Providers could be loaded. java.lang.InterruptedException at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(Unknown Source) at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source) at org.apache.logging.log4j.util.ProviderUtil.lazyInit(ProviderUtil.java:121) at org.apache.logging.log4j.util.ProviderUtil.hasProviders(ProviderUtil.java:108) at org.apache.logging.log4j.LogManager.&lt;clinit&gt;(LogManager.java:89) at org.elasticsearch.common.logging.ESLoggerFactory.getLogger(ESLoggerFactory.java:54) at org.elasticsearch.common.logging.Loggers.getLogger(Loggers.java:105) at org.elasticsearch.common.logging.Loggers.getLogger(Loggers.java:72) at org.elasticsearch.common.component.AbstractComponent.&lt;init&gt;(AbstractComponent.java:37) at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:97) at org.elasticsearch.client.transport.TransportClient.newPluginService(TransportClient.java:101) at org.elasticsearch.client.transport.TransportClient.buildTemplate(TransportClient.java:126) at org.elasticsearch.client.transport.TransportClient.&lt;init&gt;(TransportClient.java:254) at org.sonar.application.es.EsConnectorImpl$MinimalTransportClient.&lt;init&gt;(EsConnectorImpl.java:104) at org.sonar.application.es.EsConnectorImpl.buildTransportClient(EsConnectorImpl.java:90) at org.sonar.application.es.EsConnectorImpl.getTransportClient(EsConnectorImpl.java:75) at org.sonar.application.es.EsConnectorImpl.getClusterHealthStatus(EsConnectorImpl.java:62) at org.sonar.application.process.EsProcessMonitor.checkStatus(EsProcessMonitor.java:90) at org.sonar.application.process.EsProcessMonitor.checkOperational(EsProcessMonitor.java:75) at org.sonar.application.process.EsProcessMonitor.isOperational(EsProcessMonitor.java:60) at org.sonar.application.process.SQProcess.refreshState(SQProcess.java:161) at org.sonar.application.process.SQProcess$EventWatcher.run(SQProcess.java:220)ERROR StatusLogger Log4j2 could not find a logging implementation. Please add log4j-core to the classpath. Using SimpleLogger to log to the console... 解决方案： 1JDK重新安装一下，可能是安装JDK时环境变量未设置好。 访问SonarQube使用系统管理员凭据（admin / admin）登录http：// localhost：9000。 汉化sonarQube插件页面：https://docs.sonarqube.org/display/PLUG/Plugin+Library 搜索chinese 点击Chinese，跳转到github：https://github.com/SonarQubeCommunity/sonar-l10n-zh git克隆下来 1git clone https://github.com/SonarQubeCommunity/sonar-l10n-zh 进行maven打包 1mvn clean package -DskipTests 将sonar-l10n-zh-plugin-1.25-SNAPSHOT.jar放到sonarqube-7.4\extensions\plugins下，然后重启sonar服务即可. sonar默认集成了Java Ecosystem插件，该插件是一组插件的合集 （1）Java [sonar-java-plugin]：java源代码解析，计算指标等 （2）Squid [sonar-squid-java-plugin]：检查违反Sonar定义规则的代码 （3）Checkstyle [sonar-checkstyle-plugin]：使用CheckStyle检查违反统一代码编写风格的代码 （4）FindBugs [sonar-findbugs-plugin]：使用FindBugs检查违反规则的缺陷代码 （5）PMD [sonar-pmd-plugin]：使用pmd检查违反规则的代码 （6）Surefire [sonar-surefire-plugin]：使用Surefire执行单元测试 （7）Cobertura [sonar-cobertura-plugin]：使用Cobertura获取代码覆盖率 （8）JaCoCo [sonar-jacoco-plugin]：使用JaCOCO获取代码覆盖率 上面只是安装sonarqube并不能进行代码分析，而是需要Sonarqube-Scanner扫描器进行分析，接下来讲解sonarqube-scanner。 SonarQube-Scanner安装及配置下载及安装sonarqube-scanner（最新版本sonar-scanner-cli-3.2.0.1227）： https://binaries.sonarsource.com/Distribution/sonar-scanner-cli 解压sonar-scanner-3.2.0.1227-windows文件目录如下： 修改sonar-scanner配置文件在sonar-scanner-3.2.0.1227-windows\conf下的sonar-scanner.properties 123456789101112131415#Configure here general information about the environment, such as SonarQube server connection details for example#No information about specific project should appear here#----- Default SonarQube server#sonar.host.url=http://localhost:9000#----- Default source code encodingsonar.sourceEncoding=UTF-8sonar.projectKey=demo sonar.projectName=demosonar.projectVersion=1.0-SNAPSHOT sonar.sources=src/main/javasonar.tests=src/test/javasonar.binaries=target/classessonar.language=java 运行sonar-scanner首先配置配置系统环境变量path加上或者配置SCANNER_HOME D:\soft\sonarqube\sonar-scanner-3.2.0.1227-windows\bin 打开C:\Users\Administrator.jenkins\workspace下有demo项目 运行sonar-scanner.bat 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899C:\Users\Administrator\.jenkins\workspace\demo&gt;sonar-scannerINFO: Scanner configuration file: D:\soft\sonarqube\sonar-scanner-3.2.0.1227-windows\bin\..\conf\sonar-scanner.propertiesINFO: Project root configuration file: NONEINFO: SonarQube Scanner 3.2.0.1227INFO: Java 1.8.0_121 Oracle Corporation (64-bit)INFO: Windows Server 2012 6.2 amd64INFO: User cache: C:\Users\Administrator\.sonar\cacheINFO: SonarQube server 7.4.0INFO: Default locale: &quot;zh_CN&quot;, source code encoding: &quot;UTF-8&quot;INFO: Publish modeINFO: Load global settingsINFO: Load global settings (done) | time=202msINFO: Server id: BF41A1F2-AWfAVJSohnYzvvXjRljUINFO: User cache: C:\Users\Administrator\.sonar\cacheINFO: Load/download pluginsINFO: Load plugins indexINFO: Load plugins index (done) | time=94msINFO: Plugin [l10nzh] defines &apos;l10nen&apos; as base plugin. This metadata can be removed from manifest of l10n plugins since version 5.2.INFO: Load/download plugins (done) | time=172msINFO: Loaded core extensions:INFO: Process project propertiesINFO: Load project repositoriesINFO: Load project repositories (done) | time=171msINFO: Load quality profilesINFO: Load quality profiles (done) | time=156msINFO: Load active rulesINFO: Load active rules (done) | time=3432msINFO: Load metrics repositoryINFO: Load metrics repository (done) | time=78msINFO: Project key: demoINFO: Project base dir: C:\Users\Administrator\.jenkins\workspace\demoINFO: ------------- Scan demoINFO: Base dir: C:\Users\Administrator\.jenkins\workspace\demoINFO: Working dir: C:\Users\Administrator\.jenkins\workspace\demo\.scannerworkINFO: Source paths: src/main/javaINFO: Test paths: src/test/javaINFO: Source encoding: UTF-8, default locale: zh_CNINFO: Load server rulesINFO: Load server rules (done) | time=780msINFO: Language is forced to javaINFO: Index filesINFO: 2 files indexedINFO: Quality profile for java: Sonar wayINFO: Sensor JavaSquidSensor [java]INFO: Configured Java source version (sonar.java.source): noneINFO: JavaClasspath initializationWARN: Bytecode of dependencies was not provided for analysis of source files, you might end up with less precise results. Bytecode can be provided using sonar.java.libraries propertyINFO: JavaClasspath initialization (done) | time=15msINFO: JavaTestClasspath initializationWARN: Bytecode of dependencies was not provided for analysis of test files, youmight end up with less precise results. Bytecode can be provided using sonar.java.test.libraries propertyINFO: JavaTestClasspath initialization (done) | time=0msINFO: Java Main Files AST scanINFO: 1 source files to be analyzedINFO: 1/1 source files have been analyzedINFO: Java Main Files AST scan (done) | time=1030msINFO: Java Test Files AST scanINFO: 1 source files to be analyzedINFO: Java Test Files AST scan (done) | time=327msINFO: Sensor JavaSquidSensor [java] (done) | time=3853msINFO: Sensor JaCoCo XML Report Importer [jacoco]INFO: Sensor JaCoCo XML Report Importer [jacoco] (done) | time=0msINFO: 1/1 source files have been analyzedINFO: Sensor SurefireSensor [java]INFO: parsing [C:\Users\Administrator\.jenkins\workspace\demo\target\surefire-reports]INFO: Sensor SurefireSensor [java] (done) | time=125msINFO: Sensor JaCoCoSensor [java]INFO: Sensor JaCoCoSensor [java] (done) | time=0msINFO: Sensor SonarJavaXmlFileSensor [java]INFO: Sensor SonarJavaXmlFileSensor [java] (done) | time=0msINFO: Sensor Zero Coverage SensorINFO: Sensor Zero Coverage Sensor (done) | time=16msINFO: Sensor Java CPD Block IndexerINFO: Sensor Java CPD Block Indexer (done) | time=31msINFO: 1 file had no CPD blocksINFO: Calculating CPD for 0 filesINFO: CPD calculation finishedINFO: Analysis report generated in 530ms, dir size=33 KBINFO: Analysis reports compressed in 15ms, zip size=10 KBINFO: Analysis report uploaded in 63msINFO: ANALYSIS SUCCESSFUL, you can browse http://localhost:9000/dashboard?id=demoINFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis reportINFO: More about the report processing at http://localhost:9000/api/ce/task?id=AWfK-2cjZyoDqE5acg2cINFO: Task total time: 30.720 sINFO: ------------------------------------------------------------------------INFO: EXECUTION SUCCESSINFO: ------------------------------------------------------------------------INFO: Total time: 34.495sINFO: Final Memory: 17M/125MINFO: ------------------------------------------------------------------------ 分析成功后，接下来就可以在sonarqube查看结果信息。 查看sonarqube指标信息然后在sonarqube查看相应的质量指标信息，比如Bugs、漏洞、异味、覆盖率、重复率等等。 Sonar与Jenkins进行集成下载sonar插件并安装插件列表http://updates.jenkins-ci.org/download/plugins/ 下载：https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/sonar/2.8.1/sonar.hpi 系统管理–》插件管理–》Advanced 配置sonar与scanner系统管理–》全局工具配置 系统管理–》系统设置 项目配置有两种方式 方式一：采用Jenkins的SonarQube Scanner插件 点击SonarQube链接后跳转到SonarQube主页面 方式二：采用maven插件 在jenkins对应的maven中配置setting.xml 123456789101112131415在&lt;pluginGroups&gt;节点中添加： &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt;在&lt;profiles&gt;节点中添加： &lt;profile&gt; &lt;id&gt;sonar&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;sonar.host.url&gt; http://sonarQube所在的服务器IP地址:9000 &lt;/sonar.host.url&gt; &lt;/properties&gt; &lt;/profile&gt; 在被分析的Mavne项目的pom.xml文件中添加如下内容： 在jenkins构建配置界面中加上clean install sonar:sonar即可 参考文献：https://blog.csdn.net/lswnew/article/details/79193529]]></content>
      <categories>
        <category>Jenkins+SonarQube+GitLab持续集成</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins部署及操作使用]]></title>
    <url>%2F2019%2F05%2F25%2FJenkins%E9%83%A8%E7%BD%B2%E5%8F%8A%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Jenkins介绍Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。 前置条件： Jenkins 自身采用 Java 开发，所以要必须安装 JDK（采用的是JDK1.8）。 本文的项目基于 Maven 构架，所以 Maven 也必须安装（采用的是Maven）。 部署安装下载 在jenkins官网（ https://jenkins.io/）下载对应系统的jenkins.war包 启动两种启动方法： 第一种：采用Tomcat的方式由于本身就是一个war包，所以可直接放在tomcat下的webapps目录下面，启动tomcat，然后输入http://localhost:8080/jenkins/即可登录。 第二种：采用微服务的方式在电脑的任意盘，新建一个jenkins的文件夹，将jenkins.war包放进去，在当前文件夹打开doc窗口，输入java -jar jenkins.war即可启动项目，在网页输入http://localhost:8080/login即可进入（推荐第二种方法） 可以修改端口（默认端口是8080）： 修改端口 jenkins_port=”8080” ##后面的端口可自己指定 修改用户名 jenkins_user=”root” ##原值“jenkins” 操作使用## \1. 浏览器进入 http://localhost:8080/ ，首次登录需要输入初始密码来解锁，初始密码在.jenkins的目录下面，路径在登录页面会显示，如图： 注意事项：若本地没有initialadminpassword这个文件，在.jenkins的目录下修改config.xml 文件（文件目录是.jenkins-&gt;&gt;user），如图 #jbcrypt:$2a$10$LxMm9HqAI/R4z7gL57qTouW/Mrz8uSaBpCGKvKc7K6dK.g/0yk/uq 保存重启Jenkins程序，打开网页，然后重新登录，输入密码123456 2.配置jenkins 进入 Jenkins 定制界面，让选择 Install suggested plugins 或 Select plugins to install 时，两者都不要选，直接关闭，下一个界面点击“Start using Jenkins”，如图： 3.修改登录密码如图： \4. 安全设置 如图： \5. 工具设置 如图 四、**自动化打包项目配置及插件安装**\1. 安装方式 有两种插件安装方式 第一种：直接在系统管理-》管理插件-》可选插件中搜索插件名称进行安装，如图 第二种：手工下载，在系统管理-》管理插件-》高级中上传插件进行安装，如图 \2. 需安装插件 可参考网站https://blog.csdn.net/kefengwang/article/details/54233584，点击插件名称即可下载对应插件 手工下载地址：手工下载(*.hpi): http://updates.jenkins-ci.org/download/plugins/ · Subversion Plug-in ## 版本管理 SVN 的插件 · Git plugin ## 版本管理 GIT 的插件 · Maven Integration plugin ## 项目构建 Maven 的插件 · Gradle Plugin ## 项目构建 Gradle 的插件注意：有些插件安装后需重启jenkins \3. 项目构建 点击新建任务 如图 只需配置以上截图的项目，其他项默认就可以，配置完成后，保存，应用即可 \4. 项目构建过程及打包文件存放位置 在C:\Users\Lenovo.jenkins\workspace下面可看到项目的具体信息，如图： 五、**静态代码检查插件安装及项目配置**插件安装 如果是离线安装，需要先依次安装被依赖的插件：- Script Security Plugin- Matrix Project Plugin- Static Analysis Utilities 再安装直接被使用的插件：- FindBugs Plug-in- Checkstyle Plug-in- PMD Plug-in \2. 设置pom.xml 因为代码检查是根据pom.xml文件中模块的依赖关系来进行检查的，所以只用修改项目根目录下的pom.xml文件即可，在pom.xml文件中增加插件的信息，代码如下： 3.修改jenkins构建配置 在之前打包项目的基础上做修改即可，修改完成后保存，应用，按照之前的方法构建项目，项目构建完成后点击FindBugs Warnings、 Checkstyle Warnings 、PMD Warnings 可分别查看代码错误情况]]></content>
      <categories>
        <category>Jenkins+SonarQube+GitLab持续集成</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab安装及使用]]></title>
    <url>%2F2019%2F05%2F25%2FGitLab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[什么是GitLab版本管理GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。Gitlab 就是以网站的形式将 Git 服务端可视化。 GitLab的安装安装并配置必要的依赖关系在 CentOS 系统上（GitLab目前不支持Windows），下面的命令将会打开系统防火墙 HTTP 和 SSH 的访问。 12345678sudo yum install curl policycoreutils openssh-server openssh-clientssudo systemctl enable sshdsudo systemctl start sshdsudo yum install postfixsudo systemctl enable postfixsudo systemctl start postfixsudo firewall-cmd --permanent --add-service=httpsudo systemctl reload firewalld 添加 GitLab 镜像源并安装12curl -sS http://packages.gitlab.com.cn/install/gitlab-ce/script.rpm.sh | sudo bashsudo yum install gitlab-ce gitlab-ce –社区版 gitlab-ee –企业版 一般使用社区版基本差不多了，当然如果公司有需要则购买企业版的功能比较丰富。 配置并启动 GitLab1sudo gitlab-ctl reconfigure 通过域名可以访问第一次访问 GitLab，系统会重定向 url 到重置密码的页面，你需要输入初始化管理员账号的密码。 设置完成后，系统会重定向到登录界面，你就可以使用刚才输入的密码登录系统了。 http://ip:端口/ 用户名：root 修改 GitLab 配置官方安装方式下，配置文件是/etc/gitlab/gitlab.rb 123456- gitlab nginx 端口监听修改 nginx[&apos;listen_port&apos;] = 端口号- gitlab 的域名 external_url &apos;域名&apos;修改完毕后重置下gitlab:gitlab-ctl reconfigure GitLab常用命令12345678sudo gitlab-ctl start # 启动所有 gitlab 组件；sudo gitlab-ctl stop # 停止所有 gitlab 组件；sudo gitlab-ctl restart # 重启所有 gitlab 组件；sudo gitlab-ctl status # 查看服务状态；sudo gitlab-ctl reconfigure # 重新应用gitlab的配置；sudo vim /etc/gitlab/gitlab.rb # 修改默认的配置文件；gitlab-rake gitlab:check SANITIZE=true --trace # 检查gitlab；sudo gitlab-ctl tail # 查看日志； GitLab使用创建工程 Visibility Level （可见等级） Private：只有被赋予权限的用户可见 Internal：登录用户可以下载 Public：所有人可以下载 添加SSH在git客户端中输入 123456--配置使用Git仓库的人员姓名git config --global user.name &quot;xxx&quot; --配置使用Git仓库的人员email，填写自己的公司邮箱git config --global user.email &quot;xxx@qq.com&quot; --生成ssh，前面两步是可选ssh-keygen 找到id_rsa.pub文件 将id_rsa.pub文件内容复制到SSH Keys添加key 使用git clone git@192.168.1.57:root/test.git报错： 123456789101112131415161718Cloning into &apos;test&apos;...@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isSHA256:0yu4Ik0/+Gb43OJkPEjw9rPxeUH3sf1qj84/THPIm8g.Please contact your system administrator.Add correct host key in /c/Users/Administrator/.ssh/known_hosts to get rid of th is message.Offending ECDSA key in /c/Users/Administrator/.ssh/known_hosts:10ECDSA host key for 192.168.1.57 has changed and you have requested strict checki ng.Host key verification failed.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 解决方案： 删除~/.ssh/known_hosts整个文件 下载Git客户端 https://git-scm.com/downloads 12--克隆项目到本地git clone git@ip:端口/root/test 在test项目下新建一个test.txt文件 123456--将test.txt加入到暂存区git add .--提交到本地版本库git commit -m ‘add text.txt’--提交到远程版本库git push origin 然后刷新下gitlab网页，则查看到test.txt文件已提交到gitlab私库中。 把git@gitlab.example.com:root/myfams.git地址改成服务器ip地址 发现SSH地址：git@gitlab.example.com:root/myfams.git 123vim /etc/gitlab/gitlab.rb--修改external_url改成部署机器的域名或者IP地址external_url &apos;http://172.28.255.xx&apos; 权限说明Guest(匿名用户) - 创建项目、写留言薄 Reporter（报告人）- 创建项目、写留言薄、拉项目、下载项目、创建代码片段 Developer（开发者）- 创建项目、写留言薄、拉项目、下载项目、创建代码 片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分 支 、创建标签、编写wiki Master（管理者）- 创建项目、写留言薄、拉项目、下载项目、创建代码片 段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分 支 、创建标签、编写wiki、增加团队成员、推送受保护的分支、移除受保护 的分支、编辑项目、添加部署密钥、配置项目钩子 Owner（所有者）- 创建项目、写留言薄、拉项目、下载项目、创建代码片 段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分 支 、创建标签、编写wiki、增加团队成员、推送受保护的分支、移除受保护 的分支、编辑项目、添加部署密钥、配置项目钩子、开关公有模式、将项目转 移到另一个名称空间、删除项目 参考文献：https://blog.csdn.net/Adelly/article/details/79099772#_Toc480656593 https://www.cnblogs.com/weifeng1463/p/7714492.html]]></content>
      <categories>
        <category>Jenkins+SonarQube+GitLab持续集成</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx详解]]></title>
    <url>%2F2019%2F05%2F23%2FNginx%2F</url>
    <content type="text"><![CDATA[Nginx是什么​ Nginx (engine x) 是一款开源的、轻量级、高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。其特点是占有内存少、并发能力强。 主要作用： 反向代理 负载均衡 HTTP服务器（包含动静分离） 正向代理 Nginx的安装及配置准备工作：Nginx（最新稳定版本1.14.2）：http://nginx.org/en/download.html 安装：下载好Nginx后解压，目录结构为下图所示： ….conf 配置文件 … html 网页文件 …logs 日志文件 …sbin 主要二进制程序 nginx.exe启动程序 基本命令123456nginx --启动程序nginx -s stop --快速关闭nginx -s quit --优雅关闭 (等待 worker 线程完成处理)nginx -s reload --重载配置文件(支持热部署)nginx -s reopen --重新打开日志文件start nginx --重新启动 Nginx.conf配置详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#定义Nginx运行的用户和用户组user www www;#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log /var/log/nginx/error.log info;#进程文件pid /var/run/nginx.pid;#工作模式与连接数上限events &#123; #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。 use epoll; #单个进程最大连接数（最大连接数=连接数*进程数） worker_connections 65535;&#125;#设定http服务器http &#123; include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的hash表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。 autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 keepalive_timeout 120; #长连接超时时间，单位是秒 #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; #gzip模块设置 gzip on; #开启gzip压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0） gzip_comp_level 2; #压缩等级 gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。 gzip_vary on; #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用 upstream blog.ha97.com &#123; #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3;&#125;#虚拟主机的配置server &#123; #监听端口 listen 80; #域名可以有多个，用空格隔开 server_name www.ha97.com ha97.com; index index.html index.htm index.php; root /data/www/ha97; location ~ .*\.(php|php5)?$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125; #图片缓存时间设置 location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 10d; &#125; #JS和CSS缓存时间设置 location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; #日志格式设定 log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;; #定义本虚拟主机的访问日志 access_log /var/log/nginx/ha97access.log access; #对 &quot;/&quot; 启用反向代理 location / &#123; proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 &#125; #设定查看Nginx状态的地址 location /NginxStatus &#123; stub_status on; access_log on; auth_basic &quot;NginxStatus&quot;; auth_basic_user_file conf/htpasswd; #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。 &#125; #本地动静分离反向代理配置 #所有jsp的页面均交由tomcat或resin处理 location ~ .(jsp|jspx|do)?$ &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; &#125; #所有静态文件由nginx直接读取不经过tomcat或resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ &#123; expires 15d; &#125; location ~ .*.(js|css)?$ &#123; expires 1h; &#125;&#125; 日志配置默认的日志格式: 123log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos; 参数 说明 示例 $remote_addr 客户端地址 211.28.65.253 $remote_user 客户端用户名称 – $time_local 访问时间和时区 18/Jul/2012:17:00:01 +0800 $request 请求的URI和HTTP协议 “GET /article-10000.html HTTP/1.1” $http_host 请求地址，即浏览器中你输入的地址（IP或域名） www.it300.com 192.168.100.100 $status HTTP请求状态 200 $upstream_status upstream状态 200 $body_bytes_sent 发送给客户端文件内容大小 1547 $http_referer url跳转来源 https://www.baidu.com/ $http_user_agent 用户终端浏览器等信息 “Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C; $ssl_protocol SSL协议版本 TLSv1 $ssl_cipher 交换数据中的算法 RC4-SHA $upstream_addr 后台upstream的地址，即真正提供服务的主机地址 10.10.10.100:80 $request_time 整个请求的总时间 0.205 $upstream_response_time 请求过程中，upstream响应时间 0.002 Nginx的Master-Worker模式 Master进程的作用是？ 读取并验证配置文件nginx.conf；管理worker进程； Worker进程的作用是？ 每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。 正向代理与反向代理两者的区别： 图解： 在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息； 在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息； 实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。 Ø 反向代理客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。 反向代理，”它代理的是服务端”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。 反向代理的作用： （1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网 （2）负载均衡，通过反向代理服务器来优化网站的负载 nginx.conf配置 123456789server &#123; listen 80; server_name localhost; location / &#123; proxy_pass http://localhost:8080; proxy_set_header Host $host:$server_port; &#125;&#125; Ø 正向代理正向代理，”它代理的是客户端”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。 正向代理的用途： （1）访问原来无法访问的资源，如Google （2） 可以做缓存，加速访问资源 （3）对客户端访问授权，上网进行认证 （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息 123456789101112resolver 114.114.114.114 8.8.8.8;server &#123; resolver_timeout 5s; listen 81; access_log e:wwwrootproxy.access.log; error_log e:wwwrootproxy.error.log; location / &#123; proxy_pass http://$host$request_uri; &#125;&#125; 负载均衡​ 负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。 1、RR（默认）每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 1234567891011121314upstream test &#123; erver localhost:8080; server localhost:8081;&#125;server &#123; listen 81; server_name localhost; client_max_body_size 1024M; location / &#123; proxy_pass http://test; proxy_set_header Host $host:$server_port; &#125;&#125; 2、权重指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 1234upstream test &#123; server localhost:8080 weight=9; server localhost:8081 weight=1;&#125; 3、ip_hash上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 12345upstream test &#123; ip_hash; server localhost:8080; server localhost:8081;&#125; 4、fair（第三方）按后端服务器的响应时间来分配请求，响应时间短的优先分配。 12345upstream backend &#123; fair; server localhost:8080; server localhost:8081;&#125; 5、url_hash（第三方）按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法 123456upstream backend &#123; hash $request_uri; hash_method crc32; server localhost:8080; server localhost:8081;&#125; 以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过fair和url_hash需要安装第三方模块才能使用，由于本文主要介绍Nginx能做的事情，所以Nginx安装第三方模块不会再本文介绍。 几种常用web服务器对比 实战（反向代理）需求：​ 该项目是内部系统使用，采用SpringBoot微服务开发，将系统划分了好几个模块。目前的项目还不足以使用SpringCloud架构，暂未用到微服务化治理框架。之前在办公网所以直接使用服务器的ip和端口，但是交易网也需要访问该系统，所以需通过域名的方式来访问。现在都是采用前后端分离的，页面直接请求后台微服务的ip和端口，那么问题来了，如果采用域名的方式请求后台微服务肯定报404错误。有人会说部署同一台服务器，然后将端口全部开放出去，这样不就可以解决了嘛，但是这样会暴露真实的服务地址风险比较大。 方案： 采用nginx反向代理（简单、易用） 采用zuul或gateway的反向代理 最终采用Nginx反向代理，Nginx.conf配置如下： 12345678910server &#123; listen 80; server_name www.xxx.com;#外部客户端访问http://www.xxx.com/manage-platform/manage/index进行定位匹配，匹配上了然后请求转发给http://127.0.0.1:8088/manage-platform/manage/index处理 location /manage-platform &#123; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8088/manage-platform; &#125;&#125; 参考文献：https://www.cnblogs.com/wcwnina/p/8728391.html https://www.jianshu.com/p/5eab0f83e3b4 https://www.cnblogs.com/jackchen001/p/7400736.html http://blog.jobbole.com]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea中mybatis的dao报错 could not Autowired]]></title>
    <url>%2F2019%2F05%2F05%2FIdeaMybatisDaoError%2F</url>
    <content type="text"><![CDATA[原因idea mybatis dao 报错 could not Autowired，虽然不影响代码运行，但是对于开发人员来说看到这种提示感觉很不爽。主要原因是mybatis采用了自动扫描的方式以动态代理的方式处理相应的dao，在dao层没有加相应的@Repository注解，并且idea默认会自动判断是否有依赖注入，如果没有，则提示could not Autowired错误。 解决方案1在idea的File–&gt;Settings…设置Spring的依赖注入级别为Warining，则不会再有could not Autowired错误。 解决方案2可以在 所有的dao层加上@Repository，也可以解决，但是感觉改动太麻烦了。]]></content>
      <categories>
        <category>错误集</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora基本使用]]></title>
    <url>%2F2019%2F05%2F05%2FTypora%2F</url>
    <content type="text"><![CDATA[Typora介绍​ 上一篇讲解了Markdown的基本使用，想必大家觉得比较麻烦，需要熟记Markdown相关语法，手写一篇文章特别费力，特别是表格需要敲很多相关的字符标记，这篇介绍一款Markdown编辑神器，它可以直接像操作Word一样简单。 ​ Typora是一款实用易操作的Markdown编辑软件。可读和可写，Typora将为您提供读者和作家的无缝体验。 它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。 将它们替换为真实的实时预览功能，以帮助您专注于内容本身。 特点： 分心免费 无缝实时预览 你所看到的就是你的意思 Typora下载及安装下载地址（window 64位）：https://www.typora.io/windows/typora-setup-x64.exe 安装直接点击下一步，下一步就ok 然后打开软件，如图所示： Typora使用Typora基本操作文件、编辑、段落、格式、视图、主题、帮助等菜单，与Word办公软件基本差不多，完全可视化，操作非常简单就不详细讲解了。 文件（F）菜单中有新建、导入、导出等 段落（P）菜单中有1-6级标题，表格、代码块、列表、水平分割等 格式（O）菜单中有加粗、斜体、下划线、删除线、链接、图片等 Typora快捷键 标题：ctrl+数字 表格：ctrl+t 生成目录：[TOC]按回车 选中一整行：ctrl+L 跳转到文章开头：ctrl+home 跳转到文章开头：ctrl+end 搜索：ctrl+f 替换：ctrl+h 引用：ctrl+shift+q 代码块：ctrl+shift+k 加粗：ctrl+b 斜线：ctrl+i 下划线：ctrl+u 删除线：alt+shift+5 插入图片：直接拖动或者ctrl+shift+i 插入链接：ctrl+k 有序列表：ctrl+shift+[ 无序列表：ctrl+shift+]]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo基本使用]]></title>
    <url>%2F2019%2F05%2F05%2FHexo%2F</url>
    <content type="text"><![CDATA[Hexo介绍Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo安装安装安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 1$ npm install -g hexo 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 启动Hexo服务 1$ hexo server 出现以下命令则表示安装成功，在页面访问http://localhost:4000，即可访问如下图所示： 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Hexo文件说明新建完成后，指定文件夹的目录如下： 12345678910111213.├── _config.yml├── db.json├── package.json├── package-lock.json├── scaffolds| ├── drafts.md| ├── page.md| └── posts.md├── source| ├── _drafts| └── _posts└── themes scaffolds 脚手架，也就是一个工具模板 scripts 写文件的js，扩展hexo的功能 source 存放博客正文内容 source/_drafts 草稿箱 source/_posts 文件箱 themes 存放皮肤的目录 themes/landscape 默认的皮肤 _config.yml 全局的配置文件 db.json 静态常量 在这里，我们每次用到的就是_posts目录里的文件，而_config.yml文件和themes目录是第一次配置好就行了。 posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。 themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改 package.json 包管理 12345678910111213141516171819&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; &#125;&#125; Hexo配置配置_config.yml 全局配置 网站12345678# Sitetitle: Breezesubtitle: Quick notesdescription: 戒骄戒躁keywords: Breeze,徐瑞禄,Java,SpringCloud微服务author: 徐瑞禄language: zh-CNtimezone: 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址12345#URLurl: http://xuruilu.comroot: /permalink: :year/:month/:day/:title/permalink_defaults: 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 网站存放在子目录 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录123456789# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 提示 如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章123456789101112131415# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 相对地址 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签1234# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map: 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式123456# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页1234# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展123456789# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 命令init - 初始化1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new - 新建文件1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 布局 路径 post source/_posts page source draft source/_drafts 创建文章页面 1$ hexo new &quot;post title with whitespace&quot; 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 文章页面设置 12345title: Hexo搭建博客date: 2019-05-05 18:45:50categories: &quot;Markdown&quot;tags: - Markdown 创建标签初始化时都没有标签页面和分类页面的，点击时找不到页面。 创建标签页面 1$ hexo new page tages 在文章中设置 12tags: - Hexo 创建分类 创建分类页面 1$ hexo new page categories 在文章中设置 1categories： &quot;Hexo&quot; generate - 生成静态文件1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 该命令可以简写为 1$ hexo g publish - 发布1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server - 启动服务 1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy - 部署1$ hexo deploy 部署网站。| -g, --generate | 部署之前预先生成静态文件 || :—————– | :———————– || 参数 | 描述 | 该命令可以简写为： 1$ hexo d 可能会出现以下错误： 1ERROR Deployer not found: github 需要安装 hexo-deployer-git 1$ npm install hexo-deployer-git --save 修改配置。 12345deploy: type: git repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] #published message: [message] 参数 描述 repo 库（Repository）地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 message 自定义提交信息 生成站点文件并推送至远程库。执行hexo clean &amp;&amp; hexo deploy命令。前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。（如果您的Hexo是局部安装，则需要执行./node_modules/.bin/hexo clean &amp;&amp; ./node_modules/.bin/hexo deploy。） 登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。 这一切是如何发生的？ 当初次新建一个库的时候，库将自动包含一个master分支。请在这个分支下进行写作和各种配置来完善您的网页。当执行hexo deploy时，Hexo会创建或更新另外一个用于部署的分支，这个分支就是_config.yml配置文件中指定的分支。Hexo会将生成的站点文件推送至该分支下，并且完全覆盖该分支下的已有内容。因此，部署分支应当不同于写作分支。（一个推荐的方式是把master作为写作分支，另外使用public分支作为部署分支。）值得注意的是，hexo deploy并不会对本地或远程的写作分支进行任何操作，因此依旧需要手动推送写作分支的所有改动以实现版本控制。此外，如果您的Github Pages需要使用CNAME文件自定义域名，请将CNAME文件置于写作分支的source_dir目录下，只有这样hexo deploy才能将CNAME文件一并推送至部署分支。 render - 渲染1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, --output 设置输出路径 clean - 清除1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list - 列出1$ hexo list &lt;type&gt; 列出网站资料。 version - 版本1$ hexo version 显示 Hexo 版本 Hexo+Github搭建个人博客本想打算写一篇的，但是最近看到一篇非常详细的博客 Hexo+Github搭建个人博客 Hexo+Coding搭建个人博客Coding与Github相似，都是基于Git的代码托管平台，GitHub大家应该都很熟悉，相对与Coding来说，GitHub面向英语系国家程序员，Coding面向中国程序猿，而且Coding的私有库可免费使用这是最大的区别。Hexo+Coding搭建个人博客 Hexo上传图片到博客想必大家都在为图片上传到博客头疼，我之前用的是七牛云确实也挺方便的，但是现在必须要备案才能使用，所以又发现了Hexo可以直接保存图片，发布到博客，感觉特别方便特别爽。 资源文件方式一：采用source/images公共资源文件资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 ![](/images/image.jpg) 的方法访问它们。 方式二：文件文件资源夹对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml文件中的 post_asset_folder 选项设为 true 来打开。 _config.yml post_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 执行hexo new test 命令在_posts目录下新建两个文件 ├── test└── test.md 相对路径引用 基本语法： 使用： 参考文献 https://hexo.io/zh-cn/docs/configuration]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本使用]]></title>
    <url>%2F2019%2F05%2F05%2FMarkdown%2F</url>
    <content type="text"><![CDATA[Markdown介绍Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。最终通过相应的编辑器或者脚本转换成html用于页面渲染。 Markdown 的目标是实现「易读易写」。Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML、PDF文档。目前 github、Stackoverflow 等网站均支持这种格式。 接下来讲解Markdown的基本语法，主要分为区块元素和区段元素。 区块元素标题Markdown支持6种级别的标题，对应html标签 h1 ~ h6 效果如下： 区块引用Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示。区块引用也可以嵌套无限个。 12&gt;引用的内容&gt;&gt;两个引用的内容 效果如下： 引用的内容 第二个引用的内容 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： 123* Red* Green* Blue 等同于： 123+ Red+ Green+ Blue 也等同于： 123- Red- Green- Blue 效果如下： Red Green Blue 有序列表则使用数字接着一个英文句点： 1231. Bird2. McHale3. Parish 效果如下： Bird McHale Parish 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 和 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 123这是一个普通段落： 这是一个代码区块。 效果如下：这是一个普通段落： 1这是一个代码区块。 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789* * *********- - ---------------------------------------- 效果如下： 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。参考式写法比较麻烦一般采用行内式的方式。 语法： 12[超链接显示名](超链接地址 &quot;超链接title&quot;)[百度](http://baidu.com/ &quot;baidu&quot;) 效果如下：百度 图片语法： 12![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)![M图片](http://www.newasp.net/attachment/soft/2015/0713/085610_78002493.png &quot;M&quot;) 强调Markdown 使用星号（*）和底线（_）、破折号（~）作为标记强调字词的符号 加粗 要加粗的文字左右分别用两个*号包起来 1**加粗** 会转换成： 1&lt;strong&gt;加粗&lt;/strong&gt; 加粗 斜体 要倾斜的文字左右分别用一个*号包起来 1*斜体* 斜体 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 1***斜体加粗*** 斜体加粗 删除线 要加删除线的文字左右分别用两个~~号包起来 1~~删除线~~ 删除线 下划线 要加下划线的文字左右分别用号包起来 1&lt;u&gt;下划线&lt;/u&gt; 下划线 代码 语法：单行代码：代码之间分别用一个反引号包起来 1`代码内容` 会转成： 1&lt;p&gt;&lt;code&gt;代码内容&lt;/code&gt;&lt;/p&gt; 代码内容 代码块：代码之间分别用三个反（’’’）引号包起来，且两边的反引号单独占一行 123代码...代码...代码... 表格语法： 123456789表头|表头|表头-|:-:|-:内容|内容|内容内容|内容|内容第二行分割表头和内容文字默认居左-两边加：表示文字居中-右边加：表示文字居右 示例： 12345序号|姓名|年龄-|:-:|-:1|张三|182|李四|193|王五|20 序号 姓名 年龄 1 张三 18 2 李四 19 3 王五 20 其他反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号（转义字符），例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠： 1\*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
